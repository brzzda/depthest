// Generated by gencpp from file depthest/Flow.msg
// DO NOT EDIT!


#ifndef DEPTHEST_MESSAGE_FLOW_H
#define DEPTHEST_MESSAGE_FLOW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <depthest/Point2D.h>
#include <depthest/Point2D.h>

namespace depthest
{
template <class ContainerAllocator>
struct Flow_
{
  typedef Flow_<ContainerAllocator> Type;

  Flow_()
    : point()
    , velocity()  {
    }
  Flow_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::depthest::Point2D_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef  ::depthest::Point2D_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;




  typedef boost::shared_ptr< ::depthest::Flow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::depthest::Flow_<ContainerAllocator> const> ConstPtr;

}; // struct Flow_

typedef ::depthest::Flow_<std::allocator<void> > Flow;

typedef boost::shared_ptr< ::depthest::Flow > FlowPtr;
typedef boost::shared_ptr< ::depthest::Flow const> FlowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::depthest::Flow_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::depthest::Flow_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace depthest

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'depthest': ['/home/peetaa/catkin_ws/src/depthest/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'tf2_msgs': ['/opt/ros/kinetic/share/tf2_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::depthest::Flow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::depthest::Flow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::depthest::Flow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::depthest::Flow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::depthest::Flow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::depthest::Flow_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::depthest::Flow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd9a9efd88ba39035e78af697593d751";
  }

  static const char* value(const ::depthest::Flow_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd9a9efd88ba3903ULL;
  static const uint64_t static_value2 = 0x5e78af697593d751ULL;
};

template<class ContainerAllocator>
struct DataType< ::depthest::Flow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "depthest/Flow";
  }

  static const char* value(const ::depthest::Flow_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::depthest::Flow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point2D point\n\
Point2D velocity\n\
\n\
================================================================================\n\
MSG: depthest/Point2D\n\
float64 x\n\
float64 y\n\
\n\
";
  }

  static const char* value(const ::depthest::Flow_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::depthest::Flow_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Flow_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::depthest::Flow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::depthest::Flow_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::depthest::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::depthest::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEPTHEST_MESSAGE_FLOW_H
